{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue221;}
\paperw11900\paperh16840\margl1440\margr1440\vieww15100\viewh12640\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural

\f0\fs24 \cf0 LibCGI notes\
\
The following are some rough notes to get you started with LibCGI\
\

\f1\b Stacks vs text files for Revolution CGI scripting
\f0\b0 \
\
You can script Revolution CGI files either using plain text files or Revolution stacks.  I tend to find it much simpler to use Revolution stacks, because I can have them open in Revolution at the same time as they are being executed by the Web Server.  So when I am debugging a stack I have it open in Revolution, I can execute scripts (e.g. from the message box), debug, use the script editor to check formatting etc.  At the same time the WebServer will happily execute the stack (even though it is open in Rev.)\
\
If you prefer to script from a text file simply create an empty file, include a line showing where Revolution CGI engine is located, and add a startup handler.  To return results, put something.\
\
Example Rev CGI text script file:\
\
\pard\tx565\tx1133\tx1700\tx2266\tx2833\tx3401\tx3967\tx4535\tx5102\tx5669\tx6235\tx6802\ql\qnatural
\cf0 #!/usr/local/bin/revolution\
\
on startup\
    #revolution commands here\
     #return result by using put, e.g.\
    put "hello world"\
end startup\
\

\f1\b Stack scripting vs text file scripting
\f0\b0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 The advantages of CGI scripting in a stack are:\
\
- it's easier to write scripts, especially where they are complex, because:\
(i) can use the Revolution debugger to check scripting during development\
(ii) script validator ensures correct syntax while editing scripts\
- easier to write modular code:\
(iii) ability to access functions in other stacks, via script libraries (library stack xyz)\
- ability to encrypt stack file (by setting a password on the stack)\
(iv) ability to access data stored in custom properties of the stack:\
- custom properties are arranged into custom property sets and are accessed like arrays.  Individual properties can include any amount of data and can include binary data.\
\pard\tx565\tx1133\tx1700\tx2266\tx2833\tx3401\tx3967\tx4535\tx5102\tx5669\tx6235\tx6802\ql\qnatural
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 The advantages of Revolution  text file CGI scripts are:\
(i) free to use\
(ii)  unlimited script length\
(iii) can access shared code in library stacks (see above), so where a library exists you can utilize it.\
\pard\tx565\tx1133\tx1700\tx2266\tx2833\tx3401\tx3967\tx4535\tx5102\tx5669\tx6235\tx6802\ql\qnatural
\cf0 \
Note that when you create a revolution text file you need to allow it to be executed by setting file permissions.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 Under Unix operating systems, each file has permissions for different types of users.  To view these, cd to the directory and do "ls -al".  To set permission for a file to allow read and execute, "cd" to the directory and "chmod 755 <filename>".\
\pard\tx565\tx1133\tx1700\tx2266\tx2833\tx3401\tx3967\tx4535\tx5102\tx5669\tx6235\tx6802\ql\qnatural
\cf0 \

\f1\b LibCGI scripting\
\

\f0\b0 To load the LibCGI, create a cgi text file in cgi-bin folder.  Specify path to your copy of Revolution using #! in first line!\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural
\cf0 \
text file name = form.cgi\
\
#!/usr/local/bin/revolution\
\
on startup\
	library "libCGI.rev"\
end startup\
\
In the same directory, place a copy of libCGI.rev\
\
Create a subdirectory "stacks" and place any additional Revolution CGI stacks you create in it (as explained below).\
\
\pard\tx565\tx1133\tx1700\tx2266\tx2833\tx3401\tx3967\tx4535\tx5102\tx5669\tx6235\tx6802\ql\qnatural
\cf0 To execute a CGI stack, enter following in web browser:\
\
http://127.0.0.1/cgi-bin/MC/form.cgi?stack=dock&cmd=checkpass&address=rodney_tamblyn%40yahoo.com&pass=fred\
\
\pard\tx565\tx1133\tx1700\tx2266\tx2832\tx3401\tx3967\tx4535\tx5102\tx5669\tx6235\tx6802\ql\qnatural
\cf0 web server address: http://127.0.0.1/  \
path to form.cgi: /cgi-bin/MC/form.cgi \
\pard\tx565\tx1133\tx1700\tx2266\tx2832\tx3401\tx3967\tx4535\tx5102\tx5669\tx6235\tx6802\ql\qnatural
\cf0 parameters to pass: stack=dock&cmd=checkpass&address=rodney_tamblyn%40yahoo.com&pass=fred\
\
These params tell LibCGI that commands will be processed by stack "dock" in the stacks folder. LibCGI will read in the parameters passed in the command line and convert these to an array stored in the LibCGI global variable gRequestA\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural
\cf0 \
The stack parameter tells LibCGI which stack to use to process the commands.  Stacks are stored in the "stacks" subdirectory relative to libCGI.rev\
\
Inside the dock.rev stack you would could place the following handler:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 global gRequestA\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 #librarystack is called when stack is loaded (libraried) by libCGI\
on libraryStack\
  #use this commented section to view all params passed to the stack:\
\
  switch gRequestA["cmd"]\
case "echoparams"\
  repeat for each line tLine in keys(gRequestA)\
      put "<b>"&tLine&": </b>"&gRequestA[tLine]&"<br>" after tInfo\
    end repeat\
    put the keys of gRequestA into tData\
   break\
 case "emailme"\
  sendEmail  gRequestA["address"] ,"My example email message: Hello from Revolution CGI"\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural
\cf0   break\
end switch\
#to return results to user, call this function\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0   libCGI_Response tData \
end libraryStack\
\

\f1\b More advanced applications
\f0\b0 \
\
Quite sophisticated actions are possible from within CGI stack scripts.  These include accessing XML and databases.\
\
Here's an example of how you can send email from the CGI using the libSMTP stack (place it in the stacks directory!)\
\
Add the following script to your dock.rev stack, and specify a case statement to call it\
\
constant kAdminSenderEmailAddress = adminCGIaddress@domain.com\
constant kSMTPServerAddress = your_smtp_mail_server_address_here\
\
on sendEmail pAddr,pMsg\
  if not pAddr contains "@" then return "Error: invalid address specified"&&pAddr\
  try\
    if the libraries contains "libsmtp" then SMTPInitVars\
    library "libsmtp.rev"\
    if not ( the libraries contains "libsmtp") then\
      libCGI_Response  "Error: unable to load mail component to send passwords, please contact the course"&return&\\\
          " administrator or email"&&kAdminSenderEmailAddress\
      exit sendPass\
    end if\
    libSmtpAddHeader "From", kAdminSenderEmailAddress\
    libsmtpAddHeader "To",pAddr\
    libSmtpAddHeader "Subject", "Your OceanViewer Password"\
    libSmtpAddMessage "",pMsg\
    get libSmtpSend(kSMTPServerAddress, "messageDelivered"&&pSock)\
  catch err\
    libCGI_Response  "Error: unable to load mail component to send passwords, please contact the course"&return&\\\
        " administrator or email"&&kAdminSenderEmailAddress\
    exit to Metacard\
  end try\
end sendPass\
\
#SMTP mail stack has finished sending mail, return positive result\
on messageDelivered\
  libCGI_Response "message delivered"\
end messageDelivered\
\
The above script demonstrates use of the try/catch structure.  If the SMTP server was unreachable (e.g. network down) this would cause an error to be thrown.\
\

\f1\b Getting Revolution CGI stacks to write files
\f0\b0 \
\
Revolution CGI can write to files, however directories and files have to exist and have appropriate permissions set.  I believe (but haven't check this) that Apache will only allow CGIs to write to files within the CGI directory as a security measure.  Let's suppose we want to create a logs directory in the cgi-bin/MC folder and modify it to allow writing by "anyone".  We would execute the following from the console:\
mkdir logs\
chmod 766 logs/\
ls -al\
drwxrw-rw-   3 rodney  admin    102 24 Dec 00:11 logs\
\
This indicates the directory logs has read+write permission for user and anyone.  In reality, since it is loccated in the CGI directory, only CGI scripts should be able to access it.  However for applications which require security, use a database instead.  I also log important data to the system log using (see below).\
\
To write to the log directory from within a CGI stack script, call in the usual way:\
\
\
constant kLogfile = <relative or absolution path to my log file>\
\
 open file kLogfile for append #use append for logging, writes to end of file\
    write tData to file kLogfile\
    close file kLogfile\
\
The file you want to write to has to exist and it has to have write permission set.  Eg from console:\
\
touch mylogfile.txt\
chmod 766 mylogfile.txt\
\

\f1\b Miscellaneous notes and helpful tips\

\f0\b0 \
\pard\tx565\tx1133\tx1700\tx2266\tx2832\tx3401\tx3967\tx4535\tx5102\tx5669\tx6235\tx6802\ql\qnatural
\cf0 I don't think it's possible to save a stack file from within CGI (save stack).\
\
The merge function can be useful in constructing replies, eg\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0  local tInfo\
  repeat for each line tLine in keys(gRequestA)\
    put "<b>"&tLine&": </b>"&gRequestA[tLine]&"<br>" after tInfo\
  end repeat\
\pard\tx565\tx1133\tx1700\tx2266\tx2832\tx3401\tx3967\tx4535\tx5102\tx5669\tx6235\tx6802\ql\qnatural
\cf0 put merge("<html><body><h1>File Up:</h1>[[tInfo ]]</body></html>") into tHTML\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
Revolution merge command will combine the variable and text to create a string to return.\
\

\f1\b System Logging
\f0\b0 \
\
libCGI_syslog pMsg\
\
It's easy to extract information you require out of system logs, for example:\
\
In your CGI stack, log something ...\
libCGI_syslog "fredsays"&tab&"a message here..."\
\
Later from console, review system log for messages:\
\
cat /var/logs/system.log | grep "fredsays"\
\
... displays all lines containing your keyphrase "fredsays"\
\

\f1\b What about when something goes wrong?  Debugging?
\f0\b0 \
\
One of the difficult things about CGI development is that sometimes it can be difficult to tell what is happening when errors occur. \
\
When running Revolution as a CGI errors are printed to sterr, which means that they are not able to be intercepted by scripts.  The first and most important piece of advice is to use try/catch error structures around any code that is likely to generate errors.  This way you can return meaningful errors to the user and exit gracefully.  The alternative is that Apache will return a server error when Revolution CGI exits.  Advanced users: use of the the throw command is unreliable in CGI scripts, if you intend to use it you will need to test it to be sure it works OK.\
\
If an error occurs in your script Revolution will probably exit and log a message in Apache's log/error_log file.  You can view these messages in OSX by opening Console and selecting /bar/log/httpd from the listing on the right of the screen.  As new messages are logged they will appear in the window.  It's really important you check this log regularly during development.\
\
It's also worth noting that all requests to the Apache server are logged in /var/log/httpd/access_log\
\
LibCGI has a stack constant kErrorMsg which you can set, this determines how verbosely it will report errors.  During development set it to "verbose", if something goes wrong LibCGI will attempt to return as much information as possible to you in the error page.\
\
If you prefer to view errors from the terminal, you may wish to use the tail command, eg:\
tail /var/log/system.log\
\

\f1\b Processing Form data
\f0\b0 \
\
Here's an example html document containing a form.  This points to the same generic form.cgi as the examples above, but this time instead of passing parameter variables we will use form data.\
\
Createa text file and place in the web server documents directory, eg "example.html"\
\
<html>\
<body>\
<form method='POST' enctype='multipart/form-data' action='http://127.0.0.1/cgi-bin/MC/form.cgi'>\
<INPUT type="hidden" name="stack" value="fileup"> \
<INPUT type="hidden" name="cmd" value="fileUp_add"> \
File to upload: <input type=file name=upfile><br>\
Notes about the file: <input type=text name=note><br>\
<br>\
<input type=submit value=Press> to upload the file!\
</form>\
</body>\
</html>\
\
As you can see we specify the stack "fileup" to process our request, and the command "fileUp_add"\
\
User can fill in the form, attach a document and submit to server.  The fileup stack will receive the data, process it, and respond to user by using  libCGI_Response.\
\

\f1\b Dynamic Data from CGI
\f0\b0 \
\
It's possible to have Revolution render portions of pages being delivered to the user. However to do this you will have to enable server side includes on your Apache web server.\
\
First, download Apache2 from {\field{\*\fldinst{HYPERLINK "http://www.serverlogistics.com/apache2.php"}}{\fldrslt http://www.serverlogistics.com/apache2.php}}\
Then take a look at server side includes documentation on Apache: {\field{\*\fldinst{HYPERLINK "http://httpd.apache.org/docs-2.0/howto/ssi.html"}}{\fldrslt http://httpd.apache.org/docs-2.0/howto/ssi.html}}  In particular look we are interested in mod_include {\field{\*\fldinst{HYPERLINK "http://httpd.apache.org/docs-2.0/mod/mod_include.html"}}{\fldrslt http://httpd.apache.org/docs-2.0/mod/mod_include.html}}\
\
Once you've got an Apache2 server running, and you've changed it's config file to enable mod_include, then you create a page ending in .shtml.  Apache will interpret the embedded commands inside it (executed as CGIs, interpreted by MC) then return the page.  \
\
Consider the following simple page. \
\
<html>\
<body>\
The time is: <!--#include virtual="/cgi-bin/MC/form.cgi?cmd=the time&stack=util" --> \
</body>\
</html>\
\
Save this as time.shtml  When the page is access, Apache will load Revolution CGI, which will load the util stack and return the time.  A more sophisticated example might use Revolution to build dynamic web pages including information drawn from databases etc.\
\

\f1\b Using Revolution CGI with Databases using Revolution database functionality
\f0\b0 \
\
With the purchase of Metacard by RunRev, Revolution now has database functionality built into the CGI engine.  \
According to Tuviah:\
\
"Everything is supported, revdb and revxml. The embedded engine library is\
indeed used for now, and now since RR has aquired MC you can look forward\
to an english flexible syntax being integrated into the engine."\
\
Note for Jacque: I have CGI database components here for Windows and Linux (which Tuviah emailed me directly) ... let me know if you need them.  I am not sure if these are currently available on the public ftp site.\
\
The most complex part of this I find tends to be setting up the server.  As noted before, keep an eye on the error logs.\
\
Mac OSX notes:\
- PostgreSQL driver not available at present (Tuviah may be able to help)\
- MySQL tested - works fine\
- I just placed the database .so libraries in the same directory as Revolution (eg /usr/local/bin ) to avoid having to set driver paths.\
\
Windows notes:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li200\ql\qnatural
\cf2 C:\\Program Files\\Revolution\\components\\global\
environment\\database_drivers\\Win32\\dbpostgresql.dll into the same\
directory as Revolution..this will save you the pain of setting the\
driver path.\
\
Then make sure that libpq.dll is in the same directory as rev as you are\
ready to go.\cf0 \
}